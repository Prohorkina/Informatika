#include "stdafx.h"
#include <iostream>
#include <conio.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <math.h>
#include <locale.h>
#include <Windows.h>

using namespace System;
using namespace std;

long long p, q, n, m;
long long rand_d, d, e, c;
long long a, b, r;
long long E_matrix[2][2]={1,0,0,1}, B_matrix[2][2]={0,1,1,1}, C_matrix[2][2];
int i, j;
long long source_text=2006201801310518, shifro_text, deshifro_text;

int main(array<System::String ^> ^args)
{
    SetConsoleCP(1251);  
    SetConsoleOutputCP(1251);
    p=85785751;//inizializaziia dannix
    q=63284773;
    m=p*q;
    n=(p-1)*(q-1);
    cout<<"\nm="<<m<<", n="<<n;
    srand (time(NULL));
    while(1)
    {
    while (1) //beskonechnii zikl. ÅEsli chisla ne vzaimnoprosstie, to delaem noviy random
    {
        rand_d=rand() %9000 +1000;
        cout<<"\nrand_d="<<rand_d;
        //Àëãîðèòì Åâêëèäà
        a=n;
        b=rand_d;
        while (1) //beskonechnii zikl
        {
            r=a%b;
            if (r==0)
                break;
            else
            {
                a=b;
                b=r;
            }
        }
        cout<<"\nr="<<r<<"\nb="<<b<<"\na="<<a;
        if (b>1)
            cout<<"\n×èñëà íå âçàèìíî ïðîñòûå.";
        else
        {
            cout<<"\n×èñëà âçàèìíî ïðîñòûå.";
            break;
        }
    }
    d=rand_d;
    d=3553;
    cout<<"\nÂûáðàíûé êëþ÷ d="<<d;
    //modificirovanniy algoritm Evklida dlia poiska klusha 'e'
    a=n;
    b=d;
    while (1)//beskonechnii zikl
    {
        r=a%b;
        if (r==0)
            break;
        else
        {
            c=a/b;//zelaia chast ot deleniia
            cout<<"\nq="<<c<<", r="<<r;//ïpromezhytochnie rezyltati dlia otladki
            B_matrix[1][1]=-c;//-q
            C_matrix[0][0]=E_matrix[0][0]*B_matrix[0][0]+E_matrix[0][1]*B_matrix[1][0];
            C_matrix[0][1]=E_matrix[0][0]*B_matrix[0][1]+E_matrix[0][1]*B_matrix[1][1];
            C_matrix[1][0]=E_matrix[1][0]*B_matrix[0][0]+E_matrix[1][1]*B_matrix[1][0];
            C_matrix[1][1]=E_matrix[1][0]*B_matrix[0][1]+E_matrix[1][1]*B_matrix[1][1];
            for (i=0;i<2;i++)
                for (j=0;j<2;j++)
                    E_matrix[i][j]=C_matrix[i][j];
            a=b;
            b=r;
        }
    }
    cout<<"\nX="<<E_matrix[0][1]<<", Y="<<E_matrix[1][1];
    if (E_matrix[1][1]<0)
        E_matrix[1][1]+=n;
    cout<<"\nX="<<E_matrix[0][1]<<", e="<<E_matrix[1][1];
    e=E_matrix[1][1];
    //proverka rezultatov
    cout<<"\n(e*d)%n="<<(e*d)%n;
    cout<<"\n(e*d)/n="<<(e*d)/n;
    if (((e*d)%n)==1)
        break;
    }
    _getch();
    //shifrovanie variant s bistrim vozvedeniem v stepen
    long long a,b;
    c=0;
    long long binary[100]; // dlia zapisi stepeni v dvoichnoi forme
    a=d;
    for (i=0;a>0;i++)
    {
        binary[i]=a%2;
        //cout<<binary[i];
        a=(a-binary[i])/2;
        c++;
    }
    cout<<("\nrezultat =");
    for (i=0;i<c;i++)
        cout<<binary[i];
    long long itog=1,vozvodimoe_chislo=source_text, modul=m;
    for (i=c;i>-1;i--)
    {
        if (binary[i]==1)
        {
            itog=(((itog*itog)%modul)*vozvodimoe_chislo)%modul;
        }
        else
            itog=(itog*itog)%modul;
        if (itog<0)
        itog+=modul;
        cout<<"\nitog="<<itog;
    }
    shifro_text=itog;
    cout<<"\notvet="<<itog;
    cout<<"\nØèôðîâàíîå ñîîáùåíèå (âàðèàíò 0): "<<shifro_text;

    //Deshifrovanie
    c=0;
    a=e;
    a=a%(modul-1);//sokrashenie stepeni
    cout<<"\na="<<a;
    for (i=0;a>0;i++)
    {
        binary[i]=a%2;
        a=(a-binary[i])/2;
        c++;
    }

    cout<<("\nrezultat =");
    for (i=0;i<c;i++)
        cout<<binary[i];
    itog=1;
    vozvodimoe_chislo=shifro_text;
    for (i=c;i>-1;i--)
    {
        if (binary[i]==1)
        {
            itog=(((itog*itog)%modul)*vozvodimoe_chislo)%modul;
        }
        else
            itog=(itog*itog)%modul;
        if (itog<0)
        itog+=modul;
        cout<<"\nitog="<<itog;
    }
    deshifro_text=itog;
    cout<<"\notvet="<<itog;
    cout<<"\nÄåøèôðîâàíîå ñîîáùåíèå (âàðèàíò 0): "<<deshifro_text;
        _getch();
    return 0;
}
